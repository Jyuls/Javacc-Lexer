/* Generated By:JavaCC: Do not edit this line. LexicoConstants.java */
package Lexico;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LexicoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MAIN = 5;
  /** RegularExpression Id. */
  int OUT = 6;
  /** RegularExpression Id. */
  int IN = 7;
  /** RegularExpression Id. */
  int PRINT = 8;
  /** RegularExpression Id. */
  int PRINTLN = 9;
  /** RegularExpression Id. */
  int SYSTEM = 10;
  /** RegularExpression Id. */
  int CLASS = 11;
  /** RegularExpression Id. */
  int PACKAGE = 12;
  /** RegularExpression Id. */
  int PUBLIC = 13;
  /** RegularExpression Id. */
  int PRIVATE = 14;
  /** RegularExpression Id. */
  int PROTECTED = 15;
  /** RegularExpression Id. */
  int VOID = 16;
  /** RegularExpression Id. */
  int STATIC = 17;
  /** RegularExpression Id. */
  int RETURN = 18;
  /** RegularExpression Id. */
  int INT = 19;
  /** RegularExpression Id. */
  int DOUBLE = 20;
  /** RegularExpression Id. */
  int LONG = 21;
  /** RegularExpression Id. */
  int FLOAT = 22;
  /** RegularExpression Id. */
  int STRING = 23;
  /** RegularExpression Id. */
  int CHAR = 24;
  /** RegularExpression Id. */
  int BOOLEAN = 25;
  /** RegularExpression Id. */
  int TRUE = 26;
  /** RegularExpression Id. */
  int FALSE = 27;
  /** RegularExpression Id. */
  int LEFT_BRACE = 28;
  /** RegularExpression Id. */
  int RIGHT_BRACE = 29;
  /** RegularExpression Id. */
  int LEFT_PARENTHESIS = 30;
  /** RegularExpression Id. */
  int RIGHT_PARENTHESIS = 31;
  /** RegularExpression Id. */
  int LEFT_BRACKET = 32;
  /** RegularExpression Id. */
  int RIGHT_BRACKET = 33;
  /** RegularExpression Id. */
  int SEMICOLON = 34;
  /** RegularExpression Id. */
  int DOT = 35;
  /** RegularExpression Id. */
  int COMMA = 36;
  /** RegularExpression Id. */
  int ADDITION = 37;
  /** RegularExpression Id. */
  int SUBTRACTION = 38;
  /** RegularExpression Id. */
  int MULTIPLICATION = 39;
  /** RegularExpression Id. */
  int DIVISION = 40;
  /** RegularExpression Id. */
  int MODULUS = 41;
  /** RegularExpression Id. */
  int EQUAL = 42;
  /** RegularExpression Id. */
  int SUBTRACTION_ASSIGNMENT = 43;
  /** RegularExpression Id. */
  int ADDITION_ASSIGNMENT = 44;
  /** RegularExpression Id. */
  int MULTIPLICATION_ASSIGNMENT = 45;
  /** RegularExpression Id. */
  int DIVISION_ASSIGNMENT = 46;
  /** RegularExpression Id. */
  int MODULUS_ASSIGNMENT = 47;
  /** RegularExpression Id. */
  int INCREMENT = 48;
  /** RegularExpression Id. */
  int DECREMENT = 49;
  /** RegularExpression Id. */
  int AND = 50;
  /** RegularExpression Id. */
  int OR = 51;
  /** RegularExpression Id. */
  int EQUAL_TO = 52;
  /** RegularExpression Id. */
  int NOT_EQUAL_TO = 53;
  /** RegularExpression Id. */
  int GREATER_THAN = 54;
  /** RegularExpression Id. */
  int GREATER_THAN_EQUAL_TO = 55;
  /** RegularExpression Id. */
  int LESS_THAN = 56;
  /** RegularExpression Id. */
  int LESS_THAN_EQUAL_TO = 57;
  /** RegularExpression Id. */
  int IF = 58;
  /** RegularExpression Id. */
  int ELSE = 59;
  /** RegularExpression Id. */
  int WHILE = 60;
  /** RegularExpression Id. */
  int DO = 61;
  /** RegularExpression Id. */
  int SWITCH = 62;
  /** RegularExpression Id. */
  int CASE = 63;
  /** RegularExpression Id. */
  int DEFOULT = 64;
  /** RegularExpression Id. */
  int BREAK = 65;
  /** RegularExpression Id. */
  int FOR = 66;
  /** RegularExpression Id. */
  int IDENTIFIER = 67;
  /** RegularExpression Id. */
  int CHAIN = 68;
  /** RegularExpression Id. */
  int NUMBER = 69;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"main\"",
    "\"out\"",
    "\"in\"",
    "\"print\"",
    "\"println\"",
    "\"system\"",
    "\"class\"",
    "\"package\"",
    "\"public\"",
    "\"private\"",
    "\"protected\"",
    "\"void\"",
    "\"static\"",
    "\"return\"",
    "\"int\"",
    "\"double\"",
    "\"long\"",
    "\"float\"",
    "\"string\"",
    "\"char\"",
    "\"boolean\"",
    "\"true\"",
    "\"false\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\".\"",
    "\",\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"-=\"",
    "\"+=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"++\"",
    "\"--\"",
    "\"&&\"",
    "\"||\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"switch\"",
    "\"case\"",
    "\"defoult\"",
    "\"break\"",
    "\"for\"",
    "<IDENTIFIER>",
    "<CHAIN>",
    "<NUMBER>",
  };

}
